% 6DOF Sainsmart RC arm control
% Trajectores generated by linear interpolation

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Author: Dr. Ian Howard
% Associate Professor (Senior Lecturer) in Computational Neuroscience
% Centre for Robotics and Neural Systems
% Plymouth University
% A324 Portland Square
% PL4 8AA
% Plymouth, Devon, UK
% howardlab.com
% 31/03/2019
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear all
close all
clc


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% generate test trajectory by linear interpolation between joints angles

% specify name of robot
robotName = 'AngularInterpolation';

steps = 20;
servoCnt = 4;
servoAngleS(1:servoCnt) = 60;
servoAngleE(1:servoCnt) = 30;

% linearly interpolate between joint angles
% to generate q-control values(which are the joint angles )from file
qDeg = GetInterpolatedJointAngles(servoAngleS, servoAngleE, steps);

% convert degrees to radians
q = d2r(qDeg);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Plot q-control angular trajectories
PlotQTrajectories(q, robotName);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Display available serial ports
sl = seriallist;
for idx = 1:length(sl)
    sl{idx}
end
instrfind
instrfindall

% Connect to serial port
% put your serial port address here
 % create serial communication object
aUno=serial('/dev/cu.usbmodem1411','BaudRate',9600);
% initiate arduino communication
fopen(aUno); 

% % wait 5 seconds to give systemn chance to process request
pause(5);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% choose format for Ian's demo Arduino program
% wantHowardFormat = 1;
% flag off for Jake's demo Arduino program
wantHowardFormat = 0;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% test message to control 6DOG robot via Arduino
servoID = 3;
servoAngle = 40;
if(wantHowardFormat)
    message = sprintf('q%d,%dn',servoID,  servoAngle);
else
    message = sprintf('%d,%dn',servoID,  servoAngle);
end

% Display message on command window
disp(message)

% Send command message to Arduino 
fprintf(aUno,  message);

% % wait 5 seconds
pause(5);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% move robot along q trajectory

% convert q values to degrees
q = r2d(q);

% for all steps
steps=size(q,1);
servoCnt = size(q,2);
for sidx =  1:steps
    
    % write to all servos
    for servoID = 1:servoCnt
        
        % get integer control angle
        qI = floor(q(sidx,servoID));
        
        if(wantHowardFormat)
            message = sprintf('q%d,%dn',servoID, qI);
        else
            message = sprintf('%d,%dn',servoID, qI);
        end
        
        % Display message on command window
        disp(message);

        % send command message to Arduino
        fprintf(aUno,  message); 
        
        % wait 100ms
        pause(0.1);
    end
    pause(0.1)
end

% wait 5 seconds
pause(5);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% reset configuration
if(wantHowardFormat)
    fprintf(aUno,  'r');
    disp('Written command: r');
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% close arduino
fclose(aUno);
delete(aUno);
clear aUno;





